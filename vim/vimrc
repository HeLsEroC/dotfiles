" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }


" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" A vim plugin which shows git diff markers
Plug 'airblade/vim-gitgutter'

" Vim tabline
Plug 'vim-airline/vim-airline'

" Vim tabline themes
Plug 'vim-airline/vim-airline-themes'

" Vim Control space
Plug 'vim-ctrlspace/vim-ctrlspace'

" vim & tabs together
Plug 'jistr/vim-nerdtree-tabs'

" show git status in NERDTree
Plug 'xuyuanp/nerdtree-git-plugin'

" vim sesssion managemeent
" Plug 'thaerkh/vim-workspace'

" vim icons
Plug 'ryanoasis/vim-devicons'

" you complete me engine
" Plug 'valloric/youcompleteme', {'do': 'python install.py --'}

Plug 'easymotion/vim-easymotion'
Plug 'davidhalter/jedi-vim'
Plug 'python-mode/python-mode'
Plug 'jmcantrell/vim-virtualenv'

" surround.vim: quoting/parenthesizing made simple
Plug 'tpope/vim-surround'

" Syntax checking hacks for vim
" Plug 'scrooloose/syntastic'

" fuzzer and other awesome stuff
Plug 'kien/ctrlp.vim'

" add this line to your .vimrc file
Plug 'mattn/emmet-vim'

" docker file support
Plug 'ekalinin/dockerfile.vim'

" prettier wrapper
Plug 'prettier/vim-prettier'

" ansible support
Plug 'chase/vim-ansible-yaml'

" ALE linter
Plug 'w0rp/ale'

Plug 'pangloss/vim-javascript'

"Plug 'morhetz/gruvbox'

Plug 'joshdick/onedark.vim'

Plug 'KeitaNakamura/neodark.vim'

Plug 'maxmellon/vim-jsx-pretty'
Plug 'HerringtonDarkholme/yats.vim'

Plug 'yuezk/vim-js'

Plug 'editorconfig/editorconfig-vim'

Plug 'sheerun/vim-polyglot'

Plug 'othree/html5.vim'

Plug 'rust-lang/rust.vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Initialize plugin system
call plug#end()

" ------ vim-airline theme ------
let g:airline_theme='onedark'

" ------ neodark settings ------
colorscheme onedark

" ------ Global settings ------
set nocompatible
set autowrite "Automatically save before commands like :next and :make
set hidden
set encoding=utf-8
syntax enable
filetype plugin indent on
set nu

" set asm to nasm
autocmd BufNewFile,BufRead *.asm set filetype=nasm
let g:asmsyntax = 'nasm'

"TAB settings.
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set showtabline=2
set ruler

""set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest,full
set visualbell

set history=1000
set undolevels=10000


set nobackup
set noswapfile

set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start

"set pastetoggle=<F2>
"set relativenumber
set number
set norelativenumber

set shell=/usr/bin/zsh
set lazyredraw
set matchtime=3

"Changing Leader Key
let mapleader = ","

" Set title to window
set title

" Dictionary path, from which the words are being looked up.
set dictionary=/usr/share/dict/words

" Enable Mouse
set mouse=a

"Settings for Searching and Moving
"nnoremap / /\v
"vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
"nnoremap <leader><space> :noh<cr>

" go to next/previous tag
nnoremap <leader>f :tnext<cr>
nnoremap <leader>d :tprev<cr>
nnoremap <leader>tj :tjump<cr>

" Make Vim to handle long lines nicely.
set wrap
set textwidth=79
set colorcolumn=+1
set formatoptions=qrn1

" To  show special characters in Vim
"set list
set listchars=tab:▸\ ,eol:¬

" Different search patterns
let g:cpp_pattern = "*.{cpp,c,h,hpp}"
let g:java_pattern = "*.{java}"
let g:makefile_pattern = "Makefile*"
let g:text_pattern = "*.{txt,text}"
let g:python_pattern = "*.{py}"
let g:cpp_java_pattern = "*.{cpp,c,h.hpp,java,cc,hh}"


"Global project settings 
let g:project_root = "."

let g:search_root = g:project_root
let g:search_pattern = "*.*"
"==========================================================================="
" Get Rid of stupid Goddamned help keys
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

"==========================================================================="
" Set vim to save the file on focus out.
au FocusLost * :wa
"==========================================================================="
" Redraw screen every time when focus gained
au FocusGained * :redraw!
"==========================================================================="
" Adding More Shorcuts keys using leader kye.
" Leader Kye provide separate namespace for specific commands.
",W Command to remove white space from a file.
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,ft Fold tag, helpful for HTML editing.
nnoremap <leader>ft vatzf

" ,q Re-hardwrap Paragraph
nnoremap <leader>q gqip

" ,ev Shortcut to edit .vimrc file on the fly on a vertical window.
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" Working with split screen nicely
" Resize Split When the window is resized"
au VimResized * :wincmd =

" Wildmenu completion "
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig,*.rej "Merge resolution files"

" Make Sure that Vim returns to the same line when we reopen a file"
augroup line_return
    au!
    au BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \ execute 'normal! g`"zvzz' |
                \ endif
augroup END

" go to place of last change
nnoremap g; g;zz

" Make check spelling on or off
nmap <leader>cson   :set spell<CR>
nmap <leader>csoff  :set nospell<CR>

" Map copy delete and paste to system clipboard
"
vmap <Leader>y "+y
vmap <Leader>d "+d

nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" Double learder for selection whole line
nmap <Leader>v V

" TAB and Shift-TAB in normal mode cycle buffers
nmap <Tab> :bn<CR>
nmap <S-Tab> :bp<CR>

" highlight current line
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn
set report=0 "always report number of lines changed
set nowrap
set expandtab

" Removing scrollbars
if has("gui_running")
    set guitablabel=%-0.12t%M
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    set guioptions+=a
    set guioptions-=m
    colo badwolf
    set listchars=tab:▸\ ,eol:¬         " Invisibles using the Textmate style
else
    set t_Co=256
    colorscheme onedark
endif



" ------ nerdtree settings ------
"autocmd vimenter * NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$']
map <C-n> :NERDTreeToggle<CR>


" ------ gruvbox settings -----
"let g:gruvbox_contrast_dark = 'hard'

" ------ vim js plugin settings ------
let g:javascript_plugin_jsdoc = 1
" syntax folding
augroup javascript_folding
    au!
    au FileType javascript setlocal foldmethod=syntax
augroup END


" ------ jsx settings ------
let g:vim_jsx_pretty_colorful_config = 1 " default 0

" ------ Ctrl-space settings ------
if has('win32')
    let s:vimfiles = '~/vimfiles'
    let s:os   = 'windows'
else
    let s:vimfiles = '~/.vim'
    if has('mac') || has('gui_macvim')
        let s:os = 'darwin'
    else
    " elseif has('gui_gtk2') || has('gui_gtk3')
        let s:os = 'linux'
    endif
endif

let g:CtrlSpaceFileEngine = s:vimfiles . '/plugged/vim-ctrlspace' . '/bin/file_engine_' . s:os . '_amd64'

let g:CtrlSpaceSearchTiming = 500

let g:CtrlSpaceLoadLastWorkspaceOnStart = 1
let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
let g:CtrlSpaceSaveWorkspaceOnExit = 1

if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif

" ------ vim-workspace settings ------
let g:workspace_create_new_tabs = 1
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_undodir='.undodir'
let g:workspace_autosave_always = 1

" ------ Syntatic config (default) ------
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_python_checkers = ['flake8']
" in case we have multiple checker for the same file type
" let g:syntastic_aggregate_errors = 1

" ------ ALE  settings ------

" Fix files with prettier, and then ESLint.
let b:ale_fixers = ['prettier', 'eslint']

" ------ Emmet settings ------
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1

let g:ale_completion_autoimport = 1
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_vim_vint_show_style_issues=0
" do not complain about python style
let g:ale_python_pylint_options='--errors-only'
" Write this in your vimrc file
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_insert_leave = 0
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0

" disable coc warning messages
let g:coc_disable_startup_warning = 1

"show current function in "tabline" using tagbar function
try
    call tagbar#currenttag('%s','','fs') " make sure this works
    set tabline=%{tagbar#currenttag('%s','','fs')}
    set showtabline=2 " show tabline even if only one tab
    "autocmd vimrc CursorHold * let &ro = &ro "no-op that causes tabline to update
    if exists('&guioptions')
        " Don't use the gui tabline
        set guioptions-=e
    endif
catch
    "ignore failure
endtry

nmap <F8> :TagbarToggle<CR>


